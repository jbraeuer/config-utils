#! /usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'logger'
require "git_store"
require 'pp'
require 'json'
require 'grit'
require 'fileutils'

class Item
    attr_accessor :mode, :key, :value
    def initialize(mode, key, value=nil)
        @mode, @key, @value = mode, key, value
    end
end

class KVStore
    # static methods
    def self.serialize(value)
        if value.is_a? Array
            value.to_json + "\n"
        else
            serialize([value])
        end
    end

    def self.unserialize(raw)
        return [] if raw.nil? or raw.empty?
        JSON.parse(raw)
    end

    def initialize(store, items, options, log)
        @store, @items, @options, @log = store, items, options, log
    end

    def run
        @store.start_transaction

        @items.each do |item|
            @log.debug "handle item #{item.mode},#{item.key},#{item.value}"
            case item.mode
            when :get
                handle_item_get_and_print(item.key)
            when :set
                handle_items_set(item.key, item.value)
            when :append
                handle_items_append(item.key, item.value)
            when :del
                handle_items_del(item.key, item.value)
            when :listkeys
                keys = handle_items_listkeys(item.key)
                puts keys
            when :list
                handle_items_listkeys(item.key).each do |key|
                    handle_item_get_and_print(key)
                end
            end

            if [:get, :set, :del, :append].include?(item.mode)
                @log.debug "#{item.mode}: #{item.key}=#{item.value}"
                @log.debug "store: #{@store[item.key]}"
            end
        end

        if @store.root.modified?
            commit = @store.commit "n4env"
            @log.info "Commit done: #{commit.id}"
        end
        @store.finish_transaction
    end

    private
    def handle_items_get(key)
        KVStore.unserialize(@store[key])
    end

    def handle_item_get_and_print(key)
        value = handle_items_get(key)
        start = "#{key}="
        start = "" if @options[:raw]
        if value.nil? or value.empty?
            puts "#{start}"
        else
            puts "#{start}#{value.join(@options[:separator])}"
        end
    end

    def handle_items_set(key, value)
        @store[key] = KVStore.serialize(value)
    end

    def handle_items_del(key, value=nil)
        if value.nil? or value.empty?
            @store.delete(key)
        else
            values = handle_items_get(key)
            matcher = value.match("^/\(.*\)/$")
            if matcher
                regexp = Regexp.new(matcher[1])
                values = values.reject {|element| regexp.match(element) }
            else
                values = values.reject {|element| element == value}
            end
            @store[key] = KVStore.serialize(values)
        end
    end

    def handle_items_append(key, value)
        values = handle_items_get(key)
        if values.nil?
            handle_items_set(key, value)
        else
            values << value
            @store[key] = KVStore.serialize(values)
        end
    end

    def handle_items_listkeys(key)
        paths = @store.paths
        unless key.nil? or key.empty?
            paths = paths.find_all {|p| p.index(key) == 0 }
        end
        paths
    end
end

def handle_items
    store = GitStore.new @options[:storepath]
    kvstore = KVStore.new store, @options[:items], @options, @log
    kvstore.run
end

def store_init
    @log.info "Create directory #{@options[:storepath]}" unless File.directory? @options[:storepath]
    FileUtils.mkdir_p @options[:storepath]

    begin
        Grit::Repo.new(@options[:storepath])
    rescue Grit::InvalidGitRepositoryError => e
        @log.info "Create new git repo in #{@options[:storepath]}"
        Grit::Repo.init(@options[:storepath])
    end
end

def parse_options
    @options = {
        :storepath => nil,
        :storeinit => false,
        :items => [],
        :separator => ",",
        :raw => false,
    }

    opt = OptionParser.new("A tool to get/set/del key-value-pairs in a git-backed store.")
    opt.on("--store PATH", "Repo to use") do |f|
        @options[:storepath] = f
    end

    opt.on("--get KEY", "Query key") do |f|
        @options[:items] << Item.new(:get, f)
    end
    opt.on("--del KEY[=VALUE]", "Key/Value to delete. (Regexp for value supported)") do |f|
        k,v = f.split("=")
        @options[:items] << Item.new(:del, k,  v)
    end
    [:set, :append].each do |action|
        opt.on("--#{action} KEY=VALUE", "#{action.to_s.capitalize} value to/for key") do |f|
            k,v = f.split("=")
            @options[:items] << Item.new(action, k,  v)
        end
    end
    [:listkeys, :list].each do |action|
        opt.on("--#{action} [KEY]", "#{action.to_s.capitalize}") do |k|
            @options[:items] << Item.new(action, k)
        end
    end

    opt.on("--separator SEP", "Separator to use (default: '#{@options[:separator]}')") do |s|
        @options[:separator] = s
    end
    opt.on("--raw", "Output value only (default: '#{@options[:raw]}')") do
        @options[:raw] = true
    end
    opt.on("--init", "Initialize store") do
        @options[:storeinit] = true
    end

    opt.on("--verbose", 'Verbose mode') do
        @log.level = Logger::INFO if Logger::INFO < @log.level
        # @log.info "Info mode enabled."
    end
    opt.on("--debug", 'Debug mode') do
        @log.level = Logger::DEBUG if Logger::DEBUG < @log.level
        # @log.debug "Debug mode enabled."
    end

    opt.parse!

    [:storepath, :items].each do |key|
        if ( @options[key].nil? or @options[key].empty? ) and not @options[:storeinit]
            puts "Please give #{key}."
            exit(3)
        end
    end
end

def logger_init
    @log = Logger.new(STDERR)
    @log.level = Logger::WARN
    @log.formatter = proc { |severity, datetime, progname, msg| "#{severity}: #{msg}\n" }
end

logger_init
parse_options
store_init if @options[:storeinit]
handle_items
